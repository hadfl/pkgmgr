#!/usr/bin/env perl

use lib qw(); # PERL5LIB
use FindBin;
# PERL5LIB
use lib "$FindBin::RealBin/../lib"; use lib "$FindBin::RealBin/../thirdparty/lib/perl5"; # LIBDIR
use strict;
use warnings;

use Pod::Usage;
use Getopt::Long qw(GetOptionsFromArray :config posix_default no_ignore_case);
use File::Basename qw(basename);
use PkgMgr::Config;
use PkgMgr::Utils;
use PkgMgr;

my $VERSION = '0.dev'; # VERSION

#fix perldoc pager if not set
$ENV{PERLDOC_PAGER} ||= '/usr/bin/less -rins' if -x '/usr/bin/less';

my $pkgMgr   = PkgMgr->new();
my $pkgUtils = PkgMgr::Utils->new();

sub listPackages {
    my $pkgs = $pkgMgr->fetchPackages(shift, shift, shift, [ @ARGV, @{$pkgUtils->getSTDIN()} ]);

    # exit early if there are no matching packages
    exit 1 if !@$pkgs;

    return $pkgs;
}

sub printPackages {
    my $pkgList = shift;

    print join ("\n", @$pkgList) . (@$pkgList ? "\n" : '');
}

sub buildPkgDiff {
    my $pkgList = shift;

    my %pkgDiff;
    for my $pkg (keys %{$pkgList->{ref}}) {
        if (exists $pkgList->{diff}->{$pkg}) {
            $pkgDiff{$pkg} = {
                txt => "$pkgList->{ref}->{$pkg} | $pkgList->{diff}->{$pkg}",
                fmt => "",
            } if $pkgList->{ref}->{$pkg} ne $pkgList->{diff}->{$pkg};

            delete $pkgList->{diff}->{$pkg};
        }
        else {
            $pkgDiff{$pkg} = {
                txt => "$pkgList->{ref}->{$pkg} | _Removed_",
                fmt => "~~",
            };
        }
    }
    $pkgDiff{$_} = {
        txt => "_New_ | $pkgList->{diff}->{$_}",
        fmt => "**",
    } for keys %{$pkgList->{diff}};

    return [
        "| Package | Old Version | New Version |",
        "| :------ | :---------- | :---------- |",
        map {
            "| $pkgDiff{$_}->{fmt}$_$pkgDiff{$_}->{fmt} | $pkgDiff{$_}->{txt}"
        } sort keys %pkgDiff
    ];
}

sub processPackages {
    my $config  = shift;
    my $repo    = shift;
    my $opts    = shift;

    my $src      = $pkgMgr->getSrc($config, $repo, $opts);
    my $packages = listPackages($config, $repo, $src);
    my $pkgList  = [ map { $_->{'pkg.fmri'} } @$packages ];

    $pkgMgr->checkUname($config, $repo, $opts, $pkgList) if !$opts->{export};

    $pkgMgr->needsSigning($config, $repo) && $src->{src} && do {
        print "Signing the following packages in source repository:\n";
        printPackages($pkgList);

        askContinue() if !$opts->{y};

        $pkgMgr->signPackages($config, $repo, { %$opts, src => 1 }, $pkgList);

        print "\n";
    };

    my ($srcRepo, $dstRepo) = $pkgMgr->getSrcDstRepos($config, $repo, $opts);

    # remove packages that are 'on hold'
    $pkgList = $pkgMgr->filterOnHold($config, $repo, $pkgList) if !$opts->{pull};

    print '' . ($opts->{pull} ? 'Pulling' : 'Publishing')
        . " the following packages from '$srcRepo' to '$dstRepo':\n";
    printPackages($pkgList);

    askContinue() if !$opts->{y};

    $pkgMgr->publishPackages($config, $repo, $opts, $pkgList);
}

sub askContinue {
    return if !$pkgUtils->isaTTY();

    print "\nDo you want to continue [y/N]? ";
    chomp(my $check = <STDIN>);
    print "\n";

    $check !~ /^y(?:es)?$/i and exit 0;
}

sub splitOptions {
    my %opts;

    $opts{ref}->{repo} = shift @ARGV or pod2usage(1);
    $opts{$_}->{opts}  = {} for qw(ref diff);

    my @opts;
    while (my $param = shift @ARGV) {
        $param !~ /^-/ && do {
            $opts{diff}->{repo} = $param;
            GetOptionsFromArray(\@opts, $opts{ref}->{opts}, qw(src dst staging)) or exit 1;
            last;
        };
        push @opts, $param;
    }
    $opts{diff}->{repo} or pod2usage(1);
    GetOptions($opts{diff}->{opts}, qw(src dst staging)) or exit 1;

    return \%opts;
}

sub main {
    my $mainOpt = shift;
    defined $mainOpt or pod2usage(1);

    my $pkgConfig = PkgMgr::Config->new();

    for ($mainOpt) {
        /^list$/ && do {
            my $repo   = shift @ARGV or pod2usage(1);
            my $config = $pkgConfig->loadConfig($repo);

            my $opts = {};
            GetOptions($opts, qw(t|time=s long|l src dst staging)) or exit 1;

            my $packages = listPackages($config, $repo, $opts);
            if ($opts->{long}) {
                printf("%-40s %-5s %8s  %10s  %10s\n",
                    qw/PKG FLAGS FILES SIZE COMP/);
                for my $p (@$packages) {
                    printf("%-40s   %s%s%s %8d  %10s  %10s\n",
                        $p->{name},
                        $p->{signed} ? 's' : ' ',
                        defined $p->{'pkg.obsolete'} ? 'o' : ' ',
                        defined $p->{'pkg.renamed'}  ? 'r' : ' ',
                        $p->{files},
                        $pkgUtils->prettySize($p->{size}),
                        $pkgUtils->prettySize($p->{csize})
                    );
                }
            }
            else {
                printPackages([ map { $_->{'pkg.fmri'} } @$packages ]);
            }

            last;
        };
        /^url$/ && do {
            my $repo   = shift @ARGV or pod2usage(1);
            my $config = $pkgConfig->loadConfig($repo);

            my $opts = {};
            GetOptions($opts, qw(src dst staging)) or exit 1;

            my $repoPath = $pkgMgr->getRepoPath($config, $repo, $opts);
            print "$repoPath\n";

            last;
        };
        /^rebuild$/ && do {
            my $repo   = shift @ARGV or pod2usage(1);
            my $config = $pkgConfig->loadConfig($repo);

            my $opts = {};
            GetOptions($opts, qw(src dst staging)) or exit 1;

            $pkgMgr->rebuildRepo($config, $repo, $opts);

            last;
        };
        /^sign$/ && do {
            my $repo   = shift @ARGV or pod2usage(1);
            my $config = $pkgConfig->loadConfig($repo);

            my $opts = {};
            GetOptions($opts, qw(y n src dst staging)) or exit 1;

            $pkgMgr->needsSigning($config, $repo)
                or die "ERROR: signing is disabled for repository '$repo'.\n";

            my $packages = listPackages($config, $repo, $opts);
            my $pkgList  = [ map { $_->{'pkg.fmri'} } @$packages ];
            my $repoPath = $pkgMgr->getRepoPath($config, $repo, $opts);

            print "Signing the following packages in '$repoPath':\n";
            printPackages($pkgList);

            askContinue() if !$opts->{y};

            # default to 'src' which won't add --dcert and --dkey
            # as we don't want to upset older pkg(5) versions
            $opts->{src} = 1 if !($opts->{dst} || $opts->{staging});
            $pkgMgr->signPackages($config, $repo, $opts, $pkgList);

            last;
        };
        /^(?:stage|publish)$/ && do {
            my $repo   = shift @ARGV or pod2usage(1);
            my $config = $pkgConfig->loadConfig($repo);

            my $opts = {};
            GetOptions($opts, qw(y n)) or exit 1;
            $opts->{$mainOpt} = 1;

            $opts->{stage} && !$pkgMgr->hasStaging($config, $repo)
                and die "ERROR: no staging repository defined for repository '$repo'.\n";

            processPackages($config, $repo, $opts);

            $pkgMgr->rebuildRepo($config, $repo, { dst => 1 })
                if $opts->{publish} && $config->{GENERAL}->{auto_rebuild} eq 'yes' && !$opts->{n};

            last;
        };
        /^pull$/ && do {
            my $repo   = shift @ARGV or pod2usage(1);
            my $config = $pkgConfig->loadConfig($repo);

            my $opts = {};
            GetOptions($opts, qw(y n dst staging from=s)) or exit 1;
            $opts->{$mainOpt} = 1;

            $opts->{staging} && !$pkgMgr->hasStaging($config, $repo)
                and die "ERROR: no staging repository defined for repository '$repo'.\n";

            # reference for convenience
            my $cfg = $config->{REPOS}->{$repo};
            $opts->{from} && do {
                $cfg->{pull_src}->{$opts->{from}}
                    or die "ERROR: pull source '$opts->{from}' not defined in config.\n";

                print "Pulling from '$cfg->{pull_src}->{$opts->{from}}' "
                    . "to '$cfg->{src_repo}'\n";

                askContinue() if !$opts->{y};

                $pkgUtils->rsync("$cfg->{pull_src}->{$opts->{from}}/",
                    "$cfg->{src_repo}/") if !$opts->{n};

                last;
            };

            # default to dst
            $opts->{dst} = 1 if !$opts->{staging};
            processPackages($config, $repo, $opts);

            last;
        };
        /^export$/ && do {
            my $repo   = shift @ARGV or pod2usage(1);
            my $config = $pkgConfig->loadConfig($repo);

            my $opts = {};
            GetOptions($opts, qw(d=s y n src dst staging)) or exit 1;
            $opts->{$mainOpt} = 1;
            $opts->{d} or die "ERROR: option '-d <path>' is mandatory for export.\n";

            processPackages($config, $repo, $opts);

            last;
        };
        /^remove$/ && do {
            my $repo   = shift @ARGV or pod2usage(1);
            my $config = $pkgConfig->loadConfig($repo);

            my $opts = {};
            GetOptions($opts, qw(y n)) or exit 1;

            my $packages = listPackages($config, $repo, { src => 1 });
            my $pkgList  = [ map { $_->{'pkg.fmri'} } @$packages ];

            # remove packages that are 'on hold'
            $pkgList = $pkgMgr->filterOnHold($config, $repo, $pkgList);

            print "Removing the following packages from source repository:\n";
            printPackages($pkgList);

            askContinue() if !$opts->{y};

            $pkgMgr->removePackages($config, $repo, $opts, $pkgList);
            last;
        };
        /^diff$/ && do {
            my $opts   = splitOptions;
            my $config = $pkgConfig->loadConfig($opts->{ref}->{repo});
            # check if config for diff repo exists (ref repo gets checked by loadConfig
            # TBD: make loadConfig more flexible so it can check multiple repos
            exists $config->{REPOS}->{$opts->{diff}->{repo}}
                or die "ERROR: repository '$opts->{diff}->{repo}' not defined in config file.\n";

            # set default diff repo to --dst if not defined
            $opts->{diff}->{opts}->{dst} = 1 if !keys %{$opts->{diff}->{opts}};
            my %packages = map {
                my $rep = $_;
                $_ => {
                    map { $pkgUtils->getNameVersion($_->{'pkg.fmri'}) }
                       grep { !exists $_->{'pkg.obsolete'} &&
                           !exists $_->{'pkg.renamed'} }
                        reverse @{listPackages($config, $opts->{$rep}->{repo},
                            $opts->{$rep}->{opts})}
                }
            } qw(ref diff);

            printPackages(buildPkgDiff(\%packages));

            last;
        };
        /^man$/ && do {
            pod2usage(-exitstatus => 0, -verbose => 2);

            last;
        };
        /^help$/ && do {
            pod2usage(-exitval => 'NOEXIT');

            last;
        };
        /^version$/ && do {
            print basename($0) . " $VERSION\n";

            last;
        };
        #main argument invalid
        pod2usage(1);
    }
    return 1;
}

main(shift);

1;

__END__

=head1 NAME

pkgmgr - IPS package management/publishing tool.

=head1 SYNOPSIS

B<pkgmgr> I<command> [I<options...>]

where 'command' is one of the following:

    list <repo> [-t <interval>|<ISO time>] [--src|dst|staging] [pkg_fmri_pattern ...]

    url <repo> [--src|dst|staging]

    diff <ref_repo> [--src|dst|staging] <diff_repo> [--src|dst|staging] [pkg_fmri_pattern ...]

    sign <repo> [-y] [-n] [--src|dst|staging] [pkg_fmri_pattern ...]

    stage <repo> [-y] [-n] [pkg_fmri_pattern ...]

    publish <repo> [-y] [-n] [pkg_fmri_pattern ...]

    pull <repo> [--from=<pull_src>] [--dst|staging] [-y] [-n] [pkg_fmri_pattern ...]

    export <repo> -d <path> [-y] [-n] [--src|dst|staging] [pkg_fmri_pattern ...]

    remove <repo> [-y] [-n] [pkg_fmri_pattern ...]

    rebuild <repo> [--src|dst|staging]

    help

    man

    version

=head1 DESCRIPTION

Use pkgmgr to manage package publishing.

=head2 B<list>

lists all packages in the repository that match the B<pkg_fmri_pattern>,
publisher and release. Use the B<--src|dst|staging> option to specify which
repository to list. Defaults to B<--src> if not defined.
If the B<-t> option is used, only packages that have a more recent ISO timestamp will
be listed or a timestamp within B<interval> timespan. B<interval> can be suffixed
with s, M, h, d, m, y (defaults to seconds).

=head2 B<url>

prints the url of the repository. Use the B<--src|dst|staging> option to specify
which repository. Defaults to B<--src> if not defined.

=head2 B<diff>

returns a diff of package versions in the repositories that match the
B<pkg_fmri_pattern>, publisher and release.
Use the B<--src|dst|staging> option to specify which repositories to diff.
Defaults to B<--src> for B<ref_repo> and to B<--dst> for B<diff_repo>.

=head2 B<sign>

signs the packages that match the B<pkg_fmri_pattern>, publisher and release.
Use the B<--src|dst|staging> option to specify which repositoriy.
Defaults to B<--src>.

=head2 B<stage>

stages the packages that match the B<pkg_fmri_pattern>, publisher and release.
Use the B<-y> to say 'yes' to all questions asked, B<-n> for a dry-run.

=head2 B<publish>

publishes the packages that match B<pkg_fmri_pattern>, publisher and release.
Use the B<-y> to say 'yes' to all questions asked, B<-n> for a dry-run.

=head2 B<pull>

pulls the packages that match B<pkg_fmri_pattern>, publisher and release.
Use the B<-y> to say 'yes' to all questions asked, B<-n> for a dry-run.
Defaults to B<--dst> if if not defined.
If you specify B<--from=<pull_src>>, all packages will get rsynced from that
location instead of pulled from the destination repo.

=head2 B<export>

exports the packages that match B<pkg_fmri_pattern>, publisher and release
to a pkg archive at the location specified by B<-d>. Use the B<--src|dst|staging>
option to specify from which repository to export. Defaults to B<--src> if not defined.
Use the B<-y> to say 'yes' to all questions asked, B<-n> for a dry-run.

=head2 B<remove>

removes the packages that match B<pkg_fmri_pattern>, publisher and release
from the source repository. pkgrepo does not support remote package removal.
Use the B<-y> to say 'yes' to all questions asked, B<-n> for a dry-run.

=head2 B<rebuild>

initiates repository rebuild. Use the B<--src|dst|staging> option to specify which
repository to list. Defaults to B<--src> if not defined.

=head1 EXAMPLES

list all packages in the staging repository of 'r151022' containing the string 'gnu'

    pkgmgr list r151022 --staging '*gnu*'

show all packages that have changed between r151022 and bloody in the destination repos

    pkgmgr diff r151022 bloody --dst

stage all packages that have changed within the last 2 hours for repository 'r151022'

    pkgmgr list r151022 -t 2h | pkgmgr stage r151022

publish all packages that have a more recent ISO timestamp than '20170701T000000Z'

    pkgmgr list r151022 -t 20170701T000000Z | pkgmgr publish r151022

publish all packages listed in the file 'pkg_list.txt' to repository 'bloody'

    cat pkg_list.txt | pkgmgr publish bloody

rebuild remote/destination bloody repository

    pkgmgr rebuild bloody --dst

=head1 COPYRIGHT

Copyright 2019 OmniOS Community Edition (OmniOSce) Association.

=head1 LICENSE

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.
This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.
You should have received a copy of the GNU General Public License along with
this program. If not, see L<http://www.gnu.org/licenses/>.

=head1 AUTHOR

S<Andy Fiddaman E<lt>omnios@citrus-it.co.ukE<gt>>
S<Dominik Hassler E<lt>hadfl@omnios.orgE<gt>>

=head1 HISTORY

2017-07-15 had Initial Version

=cut
